import asyncio
import re
from datetime import datetime

from src.parser_subito import SubitoParser
from .markups import *
from src.database import AccountDatabase
from src.price import price_txt
from config import BOT_TOKEN
from src.payment.payment import create_invoice


from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command


asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()
database = AccountDatabase()
subito_parser = SubitoParser(bot)


@dp.message(Command('start'))
async def start(message: types.Message):
    user_id = message.from_user.id
    if not database.user_exists(user_id):  # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.add_user(user_id)
        await bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', reply_markup=main_state)


@dp.message()
async def bot_message(message: types.Message):
    user_id = message.from_user.id
    if message.chat.type == 'private':
        if database.get_state(user_id) == 'main':
            if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏':
                subscribe_time = database.get_subscribe(user_id)
                is_subscribe_valid = subscribe_time >= datetime.now()
                if is_subscribe_valid:
                    text = f'–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {subscribe_time.strftime("%d.%m.%Y %H:%M:%S")}'
                else:
                    text = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
                await bot.send_message(user_id, text, reply_markup=subscribe_state)
                database.set_state(user_id, 'subscribe')

            elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å':
                await bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {database.get_balance(user_id)} $', reply_markup=balance_state)
                database.set_state(user_id, 'balance')

            elif message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π':

                if subito_parser.is_running():
                    await bot.send_message(user_id, '–ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
                else:
                    subscribe_time = database.get_subscribe(user_id)
                    is_subscribe_valid = subscribe_time >= datetime.now()
                    if is_subscribe_valid:
                        await bot.send_message(user_id, '–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
                        await subito_parser.start(user_id)
                    else:
                        await bot.send_message(user_id, '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞')

            elif message.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π':
                if subito_parser.is_running():
                    subito_parser.stop()
                await bot.send_message(user_id, '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', reply_markup=main_state)

        elif database.get_state(user_id) == 'subscribe':
            if message.text == '–ù–∞–∑–∞–¥':

                await bot.send_message(user_id, '...', reply_markup=main_state)
                database.set_state(user_id, 'main')

            elif message.text == '–ü—Ä–æ–¥–ª–∏—Ç—å':
                current_balance = database.get_balance(user_id)
                await bot.send_message(user_id, f'–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å–∫—É, –±–∞–ª–∞–Ω—Å: {current_balance}$', reply_markup=add_subscribe_state)
                database.set_state(user_id, 'add_subscribe')

        elif database.get_state(user_id) == 'add_subscribe':
            if message.text == '–ù–∞–∑–∞–¥':

                await bot.send_message(user_id, '...', reply_markup=main_state)
                database.set_state(user_id, 'main')

            elif message.text in price_txt:
                days, _, price_ = message.text.split(' ')
                price_ = int(price_[1:-2])
                balance = database.get_balance(user_id)
                if balance < price_:
                    await bot.send_message(user_id, '–î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=add_subscribe_state)
                else:
                    database.set_balance(user_id, balance-price_)
                    new_subscribe_time = database.add_subscribe(user_id, int(days))

                    await bot.send_message(user_id, f'–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_subscribe_time}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance-price_} $', reply_markup=main_state)
                    database.set_state(user_id, 'main')

        elif database.get_state(user_id) == 'balance':
            if message.text == '–ù–∞–∑–∞–¥':
                await bot.send_message(user_id, '...', reply_markup=main_state)
                database.set_state(user_id, 'main')

            elif message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å':
                await bot.send_message(user_id, 'üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.5$\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=add_balance_state)
                database.set_state(user_id, 'add_balance')

        elif database.get_state(user_id) == 'add_balance':
            if message.text == '–ù–∞–∑–∞–¥':
                await bot.send_message(user_id, '...', reply_markup=main_state)
                database.set_state(user_id, 'main')

            else:
                try:
                    amount = float(message.text)
                    if amount < 0.05:
                        await bot.send_message(user_id, '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞')
                    else:
                        await create_invoice(bot, user_id, amount)
                except ValueError:
                    await bot.send_message(user_id, '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞')


def is_alpha_only(s: str) -> bool:
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    pattern = re.compile(r'^[a-zA-Z]+$')
    return bool(pattern.match(s))
